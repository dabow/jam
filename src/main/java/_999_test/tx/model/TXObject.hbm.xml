<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!-- Generated 2017/2/17 ?U?? 01:02:32 by Hibernate Tools 3.5.0.Final -->
<hibernate-mapping>
	<class name="_999_test.tx.model.TXObject" table="TXOBJECT">
		<id name="pk" type="long">
			<column name="PK" />
			<!-- http://letle.iteye.com/blog/78530
			1) assigned
主键由外部程序负责生成，无需Hibernate参与。
2) hilo
通过hi/lo 算法实现的主键生成机制，需要额外的数据库表保存主键生成历史状态。
3) seqhilo
与hilo 类似，通过hi/lo 算法实现的主键生成机制，只是主键历史状态保存在Sequence中，适用于支持Sequence的数据库，如Oracle。
4) increment
主键按数值顺序递增。此方式的实现机制为在当前应用实例中维持一个变量，以保存着当前的最大值，之后每次需要生成主键的时候，将此值加1作为主键。
这种方式可能产生的问题是：如果当前有多个实例访问同一个数据库，那么由于各个实例各自维护主键状态，不同实例可能生成同样的主键，从而造成主键重复异常。因此，如果同一数据库有多个实例访问，此方式必须避免使用。
5) identity
采用数据库提供的主键生成机制。如DB2、SQL Server、MySQL中的主键生成机制。
6) sequence
采用数据库提供的sequence 机制生成主键。如Oralce 中的Sequence。
7) native
由Hibernate根据底层数据库自行判断采用identity、hilo、sequence
其中一种作为主键生成方式。
8) uuid.hex
由Hibernate基于128 位唯一值产生算法生成16 进制数值（编码后以长度32 的字符串表示）作为主键。
9) uuid.string
与uuid.hex 类似，只是生成的主键未进行编码（长度16）。在某些数据库中可能出现问题（如PostgreSQL）。
10) foreign
使用外部表的字段作为主键。
			 --> 
			
			<generator class="increment" />
		</id>
		<property name="account" type="java.lang.String">
			<column name="ACCOUNT" />
		</property>
		<property name="password" type="java.lang.String">
			<column name="PASSWORD" />
		</property>
		<property name="number" type="int">
			<column name="NUMBER" />
		</property>
		<property name="longNumber" type="long">
			<column name="LONGNUMBER" />
		</property>
	</class>
</hibernate-mapping>
